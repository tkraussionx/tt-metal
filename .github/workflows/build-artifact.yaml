name: "Build tt-metal artifacts"

on:
  workflow_call:
    inputs:
      arch:
        required: false
        type: string
        default: '["grayskull", "wormhole_b0"]'
      build-type:
        required: false
        type: string
        default: "Release"
      tracy:
        required: false
        type: boolean
        default: false
        description: "Build with tracy enabled"
      os:
        required: false
        type: string
        default: "ubuntu-20.04-amd64"
      build-docker:
        required: false
        type: boolean
        default: true
        description: "Build docker image"
  workflow_dispatch:
    inputs:
      build-docker:
        required: false
        type: boolean
        default: true
        description: "Build docker image"
      arch:
        required: false
        type: string
        default: '["grayskull", "wormhole_b0"]'
      build-type:
        required: false
        type: string
        default: "Release"
      tracy:
        required: false
        type: boolean
        default: false
        description: "Build with tracy enabled"
      os:
        required: false
        type: string
        default: "ubuntu-20.04-amd64"


jobs:
  build-docker-image:
    if: ${{ inputs.build-docker == true }}
    uses: ./.github/workflows/build-docker-artifact.yaml
    secrets: inherit
    with:
      os: ${{ inputs.os }}

  build-artifact:
    needs: build-docker-image
    if: always()
    timeout-minutes: 30
    strategy:
      matrix:
        arch: ${{ fromJson(inputs.arch || '["grayskull", "wormhole_b0", "blackhole"]') }}
    env:
      TT_METAL_ENV: ${{ vars.TT_METAL_ENV }}
      ARCH_NAME: ${{ matrix.arch }}
      SILENT: 0
      VERBOSE: 1
    environment: dev
    runs-on:
      - build
      - in-service
    steps:
      - name: Verify ccache availability
        shell: bash
        run: |
          if [ ! -d "/mnt/MLPerf/ccache" ]; then
            echo "::error title=ccache-mlperf-not-mounted::NFS drive is not mounted; build machine not properly provisioned."
            exit 1
          fi
          if [ ! -d "$HOME/.ccache-ci" ]; then
            echo "::error title=ccache-not-provisioned::Ccache is not properly provisioned."
            exit 1
          fi
      - uses: tenstorrent-metal/metal-workflows/.github/actions/checkout-with-submodule-lfs@v2.0.0
      - name: Set up dynamic env vars for build
        run: |
          echo "TT_METAL_HOME=$(pwd)" >> $GITHUB_ENV
          echo "RUNNER_UID=$(id -u)" >> $GITHUB_ENV
          echo "RUNNER_GID=$(id -g)" >> $GITHUB_ENV
      - name: Update submodules
        run: |
          git submodule update --init --recursive
      - name: Generate docker tag
        id: generate-docker-tag
        uses: ./.github/actions/generate-docker-tag
        with:
          image: ${{ inputs.os }}
      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull docker image
        run: docker pull ${{ env.TT_METAL_DOCKER_IMAGE_TAG }}
      - name: Build tt-metal and libs
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.TT_METAL_DOCKER_IMAGE_TAG }}
          options: |
            --rm
            --tmpfs /tmp
            -u ${{ env.RUNNER_UID }}:${{ env.RUNNER_GID }}
            --group-add 1457
            -v ${{ github.workspace }}:${{ github.workspace }}
            -v /etc/passwd:/etc/passwd:ro
            -v /etc/shadow:/etc/shadow:ro
            -v /etc/bashrc:/etc/bashrc:ro
            -v /home/ubuntu/.ccache-ci:/home/ubuntu/.ccache
            -v /mnt/MLPerf/ccache:/mnt/MLPerf/ccache
            -e ARCH_NAME=${{ matrix.arch }}
            -w ${{ github.workspace }}
          run: |
            set -euo pipefail # basic bash hygiene

            # /tmp is a tmpfs; more efficient than persisted storage
            mkdir -p /tmp/ccache
            export CCACHE_TEMPDIR=/tmp/ccache

            # Zero out the stats so we can see how we did this build
            # NOTE: may be inaccurate if we have >1 build runner on the same machine, using the same local cache
            ccache -z

            build_command="./build_metal.sh --build-type ${{ inputs.build-type }} --build-tests --build-programming-examples --enable-ccache"
            echo "${{ inputs.tracy }}"
            if [ "${{ inputs.tracy }}" = "true" ]; then
              build_command="$build_command --enable-profiler"
            fi
            nice -n 19 $build_command
            ccache -s > build/ccache.stats
      - name: Publish Ccache summary
        run: |
          echo '## CCache Summary' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat build/ccache.stats >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
      - name: 'Tar files'
        run: tar -cvf ttm_${{ matrix.arch }}.tar build/lib ttnn/ttnn/*.so build/programming_examples build/test build/tools runtime
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: TTMetal_build_${{ matrix.arch }}${{ (inputs.tracy && '_profiler') || '' }}
          path: ttm_${{ matrix.arch }}.tar
