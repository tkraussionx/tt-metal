#!/usr/bin/env python3
# SPDX-FileCopyrightText: Â© 2024 Tenstorrent Inc.
# SPDX-License-Identifier: Apache-2.0

import sys
import os
import subprocess
import shutil
import curses
import threading
import subprocess
import shlex
import re
import time
import signal
import psutil


def ensure_less_installed():
    if shutil.which("less") is None:
        print("'less' command not found. Installing...")
        try:
            subprocess.run(["sudo", "apt", "update"], check=True)
            subprocess.run(["sudo", "apt", "install", "-y", "less"], check=True)
            print("'less' has been successfully installed.")
        except subprocess.CalledProcessError as e:
            print(f"Error installing 'less': {e}")
            sys.exit(1)


def ensure_ttsmi_installed():
    if shutil.which("tt-smi") is None:
        print("'tt-smi' command not found. Installing...")
        try:
            subprocess.run(["pip", "install", "git+https://github.com/tenstorrent/tt-smi.git"], check=True)
            print("'tt-smi' has been successfully installed.")
        except subprocess.CalledProcessError as e:
            print(f"Error installing 'tt-smi': {e}")
            sys.exit(1)

    # Run tt-smi to generate the reset config file
    hostname = os.environ.get("HOSTNAME", "unknown")
    config_dir = os.path.expanduser("~/.config/tenstorrent")
    os.makedirs(config_dir, exist_ok=True)
    config_file = os.path.join(config_dir, f"reset_config_{hostname}.json")

    try:
        subprocess.run(["tt-smi", "-g", config_file], check=True)
        print(f"Generated reset config file: {config_file}")
    except subprocess.CalledProcessError as e:
        print(f"Error generating reset config file: {e}")
        sys.exit(1)


def main(stdscr):
    curses.curs_set(0)  # Hide cursor
    curses.start_color()
    curses.use_default_colors()

    # Define color pairs using extended colors
    define_color_pairs()

    max_y, max_x = stdscr.getmaxyx()

    # Input fields positions (reordered)
    input_fields = [
        {"label": "Command [demo]", "value": "", "x": 0, "y": 0},
        {"label": "Model (1b, 3b, 8b, 11b, 70b) [all]", "value": "", "x": 0, "y": 1},
        {"label": "Device (n150, n300, t3k) [all]", "value": "", "x": 0, "y": 2},
    ]

    output_entries = []
    current_line = 0  # Index of the current line (input fields + output entries)
    total_lines = len(input_fields)

    screen_lock = threading.Lock()
    screen_needs_update = threading.Event()  # New event to signal screen updates
    last_drawn_state = {
        "input_fields": [],  # Start with an empty list
        "output_entries": [],
        "current_line": -1,  # Set to an invalid value to force initial draw
        "max_y": max_y,
        "max_x": max_x,
    }

    # Start the worker thread
    worker_stop_event = threading.Event()
    worker_thread = threading.Thread(
        target=worker_thread_func, args=(output_entries, worker_stop_event, screen_lock, screen_needs_update)
    )
    worker_thread.daemon = True
    worker_thread.start()

    stdscr.nodelay(True)  # Set getch() non-blocking

    # Initial draw
    draw_changes(stdscr, input_fields, output_entries, current_line, last_drawn_state)
    stdscr.refresh()

    exiting = False  # New flag to indicate we're in the process of exiting

    # Main loop
    while True:
        new_max_y, new_max_x = stdscr.getmaxyx()
        if new_max_y != last_drawn_state["max_y"] or new_max_x != last_drawn_state["max_x"]:
            stdscr.clear()
            last_drawn_state["max_y"], last_drawn_state["max_x"] = new_max_y, new_max_x
            last_drawn_state["input_fields"] = []  # Reset to force redraw
            last_drawn_state["output_entries"] = []  # Reset to force redraw
            screen_needs_update.set()

        if screen_needs_update.is_set():
            with screen_lock:
                # Draw everything
                draw_changes(stdscr, input_fields, output_entries, current_line, last_drawn_state)
                draw_help_bar(stdscr, current_line, len(input_fields), len(output_entries))  # Add this line
                stdscr.refresh()
            screen_needs_update.clear()

        c = stdscr.getch()

        # Check if we should exit after all jobs are done
        if exiting and all(
            entry["status"] in ["Exiting", "Cancelled", "Error", "Finished"] for entry in output_entries
        ):
            return

        if c == -1:
            # No key pressed, continue to next iteration
            time.sleep(0.01)  # Short sleep to prevent high CPU usage
            continue
        elif c == 27:  # Handle escape key press
            if not exiting:
                exiting = True
                worker_stop_event.set()

                # Find the running job and set it to terminate
                running_entry = None
                for entry in output_entries:
                    with entry["lock"]:
                        if entry["process"] and entry["process"].poll() is None:
                            running_entry = entry
                            entry["stop_event"].set()
                            entry["status"] = "Terminating"
                            terminate_process_tree(entry["process"].pid)
                            break

                # Set all other jobs to "Exiting"
                for entry in output_entries:
                    with entry["lock"]:
                        if entry != running_entry and entry["status"] == "Waiting":
                            entry["status"] = "Exiting"

                # Clear input fields
                for field in input_fields:
                    field["value"] = "Exiting"

                screen_needs_update.set()
            else:
                # If escape is pressed again while exiting, force quit
                return
        elif c == curses.KEY_UP:
            current_line = (current_line - 1) % (len(input_fields) + len(output_entries))
            screen_needs_update.set()
        elif c == curses.KEY_DOWN:
            current_line = (current_line + 1) % (len(input_fields) + len(output_entries))
            screen_needs_update.set()
        elif c == curses.KEY_ENTER or c == 10 or c == 13:
            if not exiting:
                if current_line < len(input_fields):
                    # We are in input fields
                    current_field = current_line

                    # If the last field is selected, submit the command
                    if current_field == len(input_fields) - 1:
                        # Submit command
                        command_input = input_fields[0]["value"] or "demo"
                        model_input = input_fields[1]["value"] or "1b,3b,8b,11b,70b"
                        device_input = input_fields[2]["value"] or "n150,n300,t3k"

                        if command_input == "modules":
                            command_input = "rmsnorm,attention,attention-prefill,mlp,lm-head"

                        if command_input == "tests":
                            command_input = "embedding,rmsnorm,attention,attention-prefill,mlp,lm-head,decoder,decoder-prefill,model,model-prefill"

                        # Parse models, devices, and commands
                        models = parse_list(model_input)
                        devices = parse_list(device_input)
                        commands = parse_list(command_input, allow_space=False)

                        # Generate combinations (reordered)
                        combinations = [
                            (c, m, d)
                            for c in commands
                            for m in models
                            for d in devices
                            if not (m == "70b" and d in ["n150", "n300"])
                        ]

                        # Create output entries
                        for command, model, device in combinations:
                            command_name = get_command_name(command)
                            entry = {
                                "command_name": command_name,
                                "model": model,
                                "device": device.upper(),
                                "status": "Waiting",
                                "output": "",
                                "process": None,
                                "log_file": None,
                                "index": len(output_entries),
                                "stop_event": threading.Event(),
                                "lock": threading.Lock(),
                                "command_input": command,  # Save the individual command
                            }
                            output_entries.append(entry)
                        # Update total_lines
                        total_lines = len(input_fields) + len(output_entries)
                        current_line = 0
                        screen_needs_update.set()
                    else:
                        # Otherwise if not the last field, move to next field
                        current_line = (current_line + 1) % total_lines
                        screen_needs_update.set()
                else:
                    # We are in the output entries
                    entry_index = current_line - len(input_fields)
                    if entry_index < len(output_entries):
                        entry = output_entries[entry_index]
                        if entry["log_file"]:
                            # Save current terminal state
                            curses.def_prog_mode()
                            # Exit curses temporarily
                            curses.endwin()
                            # Run less command
                            os.system(f"less -R {entry['log_file'].name}")
                            # Resume curses
                            curses.reset_prog_mode()
                            stdscr.refresh()
                            screen_needs_update.set()
            else:
                # Ignore enter key when exiting
                continue
        elif c == curses.KEY_BACKSPACE or c == 127 or (c == ord("x") and current_line >= len(input_fields)):
            if current_line < len(input_fields):
                current_field = current_line
                # Remove last character from current field
                if len(input_fields[current_field]["value"]) > 0:
                    input_fields[current_field]["value"] = input_fields[current_field]["value"][:-1]
            else:
                # We are in the output entries
                entry_index = current_line - len(input_fields)
                if entry_index < len(output_entries):
                    entry = output_entries[entry_index]
                    with entry["lock"]:
                        if entry["process"] and entry["process"].poll() is None:
                            # Cancel the running process
                            entry["stop_event"].set()
                            terminate_process_tree(entry["process"].pid)
                            entry["status"] = "Terminating"
                        elif entry["status"] != "Resetting":
                            # Remove the entry if it's already cancelled
                            output_entries.pop(entry_index)
                            total_lines -= 1
                            if current_line >= total_lines:
                                current_line = total_lines - 1
                    screen_needs_update.set()
        elif c == 9:  # Tab key
            current_line = (current_line + 1) % total_lines
            screen_needs_update.set()
        elif c == ord("r") and current_line >= len(input_fields):
            entry_index = current_line - len(input_fields)
            if entry_index < len(output_entries):
                entry = output_entries[entry_index]
                with entry["lock"]:
                    if entry["status"] in ["Finished", "Error", "Cancelled"]:
                        # Reset the entry to "Waiting" status
                        entry["status"] = "Waiting"
                        entry["output"] = ""
                        if "speed" in entry:
                            del entry["speed"]
                        if "pcc" in entry:
                            del entry["pcc"]
                        entry["process"] = None
                        entry["log_file"] = None
                        entry["stop_event"].clear()
                        screen_needs_update.set()
        else:
            if current_line < len(input_fields) and not exiting:
                current_field = current_line
                input_fields[current_field]["value"] += chr(c)
            screen_needs_update.set()


def define_color_pairs():
    # Extended color codes (assuming 256-color support)
    # Muted pastel colors
    COLOR_LIGHT_BLUE = 109  # Light pastel blue
    COLOR_LIGHT_CYAN = 152  # Light pastel cyan
    COLOR_LIGHT_GREEN = 108  # Light pastel green
    COLOR_LIGHT_YELLOW = 229  # Light pastel yellow
    COLOR_LIGHT_RED = 174  # Light pastel red
    COLOR_LIGHT_PURPLE = 183  # Light pastel purple
    COLOR_GRAY = 250  # Light gray
    COLOR_WHITE = 15  # Bright white
    COLOR_BLACK = 16  # Black

    COLOR_DARK_BLUE = 17  # Dark blue for help bar background
    COLOR_LIGHT_YELLOW = 229  # Light yellow for help bar text

    # Initialize color pairs
    curses.init_pair(1, COLOR_BLACK, COLOR_GRAY)  # Selected field/background
    curses.init_pair(2, COLOR_LIGHT_CYAN, -1)  # Labels
    curses.init_pair(3, COLOR_WHITE, -1)  # Input values
    curses.init_pair(4, COLOR_WHITE, -1)  # Header text
    curses.init_pair(5, COLOR_GRAY, -1)  # 'Waiting' status
    curses.init_pair(6, COLOR_LIGHT_YELLOW, -1)  # 'Running' status
    curses.init_pair(7, COLOR_LIGHT_GREEN, -1)  # 'Finished' status
    curses.init_pair(8, COLOR_LIGHT_RED, -1)  # 'Error' status
    curses.init_pair(9, COLOR_LIGHT_GREEN, -1)  # PCC > 0.99
    curses.init_pair(10, COLOR_LIGHT_YELLOW, -1)  # PCC 0.98-0.99
    curses.init_pair(11, COLOR_LIGHT_RED, -1)  # PCC < 0.98

    # Add a new color pair for the help bar
    curses.init_pair(12, COLOR_LIGHT_CYAN, -1)

    # Store the color pair numbers for use in the rest of the program
    global COLOR_PAIR_SELECTED
    global COLOR_PAIR_LABEL
    global COLOR_PAIR_VALUE
    global COLOR_PAIR_HEADER
    global COLOR_PAIR_WAITING
    global COLOR_PAIR_RUNNING
    global COLOR_PAIR_FINISHED
    global COLOR_PAIR_ERROR
    global COLOR_PAIR_SPEED
    global COLOR_PAIR_PCC_GREEN
    global COLOR_PAIR_PCC_YELLOW
    global COLOR_PAIR_PCC_RED
    global COLOR_PAIR_HELP_BAR

    COLOR_PAIR_SELECTED = curses.color_pair(1)
    COLOR_PAIR_LABEL = curses.color_pair(2)
    COLOR_PAIR_VALUE = curses.color_pair(3)
    COLOR_PAIR_HEADER = curses.color_pair(4) | curses.A_BOLD
    COLOR_PAIR_WAITING = curses.color_pair(5)
    COLOR_PAIR_RUNNING = curses.color_pair(6)
    COLOR_PAIR_FINISHED = curses.color_pair(7)
    COLOR_PAIR_ERROR = curses.color_pair(8)
    COLOR_PAIR_SPEED = curses.color_pair(6)  # Use the same color as RUNNING
    COLOR_PAIR_PCC_GREEN = curses.color_pair(9)
    COLOR_PAIR_PCC_YELLOW = curses.color_pair(10)
    COLOR_PAIR_PCC_RED = curses.color_pair(11)
    COLOR_PAIR_HELP_BAR = curses.color_pair(12)


def draw_changes(stdscr, input_fields, output_entries, current_line, last_drawn_state):
    max_y, max_x = stdscr.getmaxyx()

    # Update input fields
    for idx, field in enumerate(input_fields):
        if (
            idx >= len(last_drawn_state["input_fields"])
            or field != last_drawn_state["input_fields"][idx]
            or current_line != last_drawn_state["current_line"]
        ):
            draw_input_field(stdscr, field, idx == current_line, max_x)
            if idx < len(last_drawn_state["input_fields"]):
                last_drawn_state["input_fields"][idx] = field.copy()
            else:
                last_drawn_state["input_fields"].append(field.copy())

    # Draw a divider line
    divider_y = len(input_fields)
    stdscr.hline(divider_y, 0, curses.ACS_HLINE, max_x)

    # Draw header
    header_y = divider_y + 1
    header = format_header(max_x)
    stdscr.addstr(header_y, 0, header, COLOR_PAIR_HEADER)
    stdscr.clrtoeol()

    # Update output entries
    output_start_y = header_y + 1
    for idx, entry in enumerate(output_entries):
        y = output_start_y + idx
        if y >= max_y - 3:  # Change this line from max_y - 2 to max_y - 3
            break
        if (
            idx >= len(last_drawn_state["output_entries"])
            or entry != last_drawn_state["output_entries"][idx]
            or current_line != last_drawn_state["current_line"]
        ):
            draw_output_entry(stdscr, entry, y, current_line == len(input_fields) + idx, max_x)

    # Clear any extra lines if output entries were removed
    for y in range(
        output_start_y + len(output_entries),
        min(
            output_start_y + len(last_drawn_state["output_entries"]), max_y - 3
        ),  # Change this line from max_y - 2 to max_y - 3
    ):
        stdscr.move(y, 0)
        stdscr.clrtoeol()

    # Update last_drawn_state
    last_drawn_state["output_entries"] = [entry.copy() for entry in output_entries]
    last_drawn_state["current_line"] = current_line


def draw_input_field(stdscr, field, is_selected, max_x):
    x, y = field["x"], field["y"]
    label, value = field["label"], field["value"]
    if is_selected:
        stdscr.addstr(y, x, label + ": ", COLOR_PAIR_SELECTED)
        stdscr.addstr(y, x + len(label) + 2, value, COLOR_PAIR_SELECTED)
    else:
        stdscr.addstr(y, x, label + ": ", COLOR_PAIR_LABEL)
        stdscr.addstr(y, x + len(label) + 2, value, COLOR_PAIR_VALUE)
    stdscr.clrtoeol()  # Clear the rest of the line


def draw_output_entry(stdscr, entry, y, is_selected, max_x):
    cols = [
        entry["command_name"],
        entry["model"],
        entry["device"],
        entry["status"],
        entry.get("speed", ""),
        entry.get("pcc", ""),
        entry["output"],
    ]
    col_widths = [20, 10, 10, 20, 10, 10, max_x - 85]  # Adjusted widths to accommodate the PCC column

    x = 0
    for i, (col, width) in enumerate(zip(cols, col_widths)):
        col_text = str(col)[:width].ljust(width)
        if is_selected:
            stdscr.addstr(y, x, col_text, COLOR_PAIR_SELECTED)
        else:
            color = curses.color_pair(0)
            if i == 3:  # Status column
                status = entry["status"]
                if status == "Waiting" or status == "Cancelled":
                    color = COLOR_PAIR_WAITING
                elif status in ["Running", "Initializing device", "Prefill", "Decode", "Starting"] or status.startswith(
                    "Loading "
                ):
                    color = COLOR_PAIR_RUNNING
                elif status == "Finished":
                    color = COLOR_PAIR_FINISHED
                elif status == "Error":
                    color = COLOR_PAIR_ERROR
                elif status == "Terminating" or status == "Resetting":
                    color = COLOR_PAIR_WAITING
            elif i == 4:  # Speed column
                color = COLOR_PAIR_SPEED
            elif i == 5:  # PCC column
                if col:
                    pcc_value = float(col)
                    if pcc_value > 0.99:
                        color = COLOR_PAIR_PCC_GREEN
                    elif 0.98 < pcc_value <= 0.99:
                        color = COLOR_PAIR_PCC_YELLOW
                    else:
                        color = COLOR_PAIR_PCC_RED
            else:
                color = curses.color_pair(0)
            stdscr.addstr(y, x, col_text, color)
        x += width
    stdscr.clrtoeol()  # Clear the rest of the line


def format_header(max_x):
    cols = ["Command", "Model", "Device", "Status", "Speed", "PCC", "Output"]
    col_widths = [20, 10, 10, 20, 10, 10, max_x - 85]  # Adjusted widths to accommodate the PCC column
    formatted_cols = []
    for col, width in zip(cols, col_widths):
        formatted_cols.append(col[:width].ljust(width))
    return "".join(formatted_cols)


def parse_list(input_str, allow_space=True):
    if not input_str.strip():
        return [""]
    else:
        if allow_space:
            items = [item.strip() for item in re.split(r"[,\s]+", input_str.strip()) if item.strip()]
        else:
            items = [item.strip() for item in input_str.strip().split(",") if item.strip()]
        return items


def worker_thread_func(output_entries, stop_event, screen_lock, screen_needs_update):
    while not stop_event.is_set():
        running_entry = None
        for entry in output_entries:
            with entry["lock"]:
                # Check if the process is still running (poll() returns None for running processes)
                # or if the entry is in a transitional state
                if (entry["process"] and entry["process"].poll() is None) or entry["status"] in [
                    "Resetting",
                    "Terminating",
                    "Initializing device",
                ]:
                    running_entry = entry
                    break

        if not running_entry:
            for entry in output_entries:
                with entry["lock"]:
                    if entry["status"] == "Waiting":
                        with open("running.txt", "a") as f:
                            # Write a list of all the entry statuses in output_entries
                            for e in output_entries:
                                f.write(f"{e['command_name']} {e['model']} {e['device']} {e['status']}\n")
                            f.write("\n")
                        run_entry_command(entry, screen_lock, output_entries, screen_needs_update)
                        break
        # Set screen_needs_update whenever there's a change in output entries
        screen_needs_update.set()
        time.sleep(0.1)


def run_entry_command(entry, screen_lock, output_entries, screen_needs_update):
    entry["status"] = "Initializing device"
    screen_needs_update.set()

    # Set environment variables
    env = os.environ.copy()
    env["FAKE_DEVICE"] = entry["device"]
    env["LLAMA_DIR"] = get_llama_dir(entry["model"])

    # Define command shortcuts
    command_shortcuts = {
        "demo": "pytest models/demos/llama3/demo/demo.py -k instruct_weights-1",
        "demo_1layer": "pytest models/demos/llama3/demo/demo.py -k single_layer",
        "attention": "pytest models/demos/llama3/tests/test_llama_attention.py",
        "attention-prefill": "pytest models/demos/llama3/tests/test_llama_attention_prefill.py",
        "mlp": "pytest models/demos/llama3/tests/test_llama_mlp.py",
        "rmsnorm": "pytest models/demos/llama3/tests/test_llama_rms_norm.py",
        "embedding": "pytest models/demos/llama3/tests/test_llama_embedding.py",
        "decoder": "pytest models/demos/llama3/tests/test_llama_decoder.py",
        "decoder-prefill": "pytest models/demos/llama3/tests/test_llama_decoder_prefill.py",
        "lm-head": "pytest models/demos/llama3/tests/test_lm_head.py",
        "model": "pytest models/demos/llama3/tests/test_llama_model.py -k full",
        "model-quick": "pytest models/demos/llama3/tests/test_llama_model.py -k quick",
        "model-prefill": "pytest models/demos/llama3/tests/test_llama_model_prefill.py",
    }

    # Check if the command is a shortcut and replace it if necessary
    command_input = entry["command_input"]
    if command_input in command_shortcuts:
        command_input = command_shortcuts[command_input]
    else:  # If command is invalid, set status to "Error" and return a message to the user with the full list of commands
        entry["status"] = "Error"
        entry["output"] = f"Warning: '{command_input}' is not a valid command. Valid commands are: " + ", ".join(
            command_shortcuts.keys()
        )
        screen_needs_update.set()

    # Prepare the command
    cmd_list = shlex.split(command_input)

    # Open log file
    log_filename = get_log_filename(entry["device"], entry["model"], command_input)
    os.makedirs("logs", exist_ok=True)
    entry["log_file"] = open(os.path.join("logs", log_filename), "w")

    # If the command is invalid, write the output to the log file and return before trying to run the bad command
    if entry["status"] == "Error":
        entry["log_file"].write(entry["output"] + "\n")
        entry["log_file"].flush()
        return

    # Start the subprocess
    entry["process"] = subprocess.Popen(
        cmd_list, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env, text=True, preexec_fn=os.setsid
    )

    # Read the output in a separate thread
    entry["thread"] = threading.Thread(
        target=process_output, args=(entry, screen_lock, output_entries, screen_needs_update)
    )
    entry["thread"].daemon = True
    entry["thread"].start()


def process_output(entry, screen_lock, output_entries, screen_needs_update):
    process = entry["process"]
    log_file = entry["log_file"]
    previous_line = ""
    try:
        for line in iter(process.stdout.readline, ""):
            if entry["stop_event"].is_set():
                break
            # Write to log file
            log_file.write(line)
            log_file.flush()

            # Update status and output based on output
            status, output, speed, pcc = parse_output_line(line, previous_line, entry["status"])
            previous_line = line.strip()
            with entry["lock"]:
                if status != entry["status"] or output or speed is not None or pcc is not None:
                    entry["status"] = status
                    if output:
                        entry["output"] = output
                    if speed is not None:
                        entry["speed"] = f"{speed:.1f}"
                    if pcc is not None:
                        current_pcc = entry.get("pcc")
                        if current_pcc is None or float(pcc) < float(current_pcc):
                            entry["pcc"] = pcc
                    screen_needs_update.set()

            with screen_lock:
                pass  # Screen will be updated in main loop

    finally:
        # Ensure we close the stdout stream
        process.stdout.close()

        # Wait for the process to fully terminate
        process.wait()

        with entry["lock"]:
            if process.returncode != 0:
                exception_name = find_exception_in_log(entry["log_file"].name)
                entry["status"] = "Error"
                if exception_name:
                    entry["output"] = exception_name
                    reset_device_async(entry, screen_lock, screen_needs_update)
                    screen_needs_update.set()
            else:
                entry["status"] = "Finished"
        entry["process"] = None
        log_file.close()

        screen_needs_update.set()  # Ensure screen is updated after process termination


def parse_output_line(line, previous_line, current_status):
    line = line.strip()

    # Check for speed information
    speed = None
    speed_match = re.search(r"@ (\d+\.\d+) tok/s/user", line)
    if speed_match:
        speed = float(speed_match.group(1))

    # Check for PCC information
    pcc = None
    pcc_match = re.search(r"PCC: (\d+\.\d+)", line)
    if pcc_match:
        pcc = f"{float(pcc_match.group(1)):.5f}"

    if "Initializing device" in line:
        return "Initializing device", None, speed, pcc
    elif "Loading weights" in line:
        return "Loading weights", None, speed, pcc
    elif re.search(r"layers\.\d+\.", line):
        match = re.search(r"layers\.(\d+)\.", line)
        if match:
            layer_number = match.group(1)
            return f"Loading layer {layer_number}", None, speed, pcc
    elif "Starting inference..." in line:
        return "Starting", None, speed, pcc
    elif "Starting prefill..." in line:
        return "Prefill", None, speed, pcc
    elif "Starting decode..." in line:
        return "Decode", None, speed, pcc
    elif line == "output:":
        return "Waiting for output", None, speed, pcc
    elif current_status == "Waiting for output" and previous_line == "output:":
        if "<|start_header_id|>assistant<|end_header_id|>" in line:
            output = line.split("<|start_header_id|>assistant<|end_header_id|>", 1)[1].strip()
            if output:
                return "Running", output, speed, pcc
            else:
                return "Assistant output", None, speed, pcc  # wait for a non-blank line
        else:
            return "Running", line, speed, pcc
    elif current_status == "Assistant output" and line:  # skip blank lines
        return "Running", line, speed, pcc

    # Check for test output
    test_match = re.search(r"\| models\.demos\.llama3\.tests\..+ - (.+)", line)
    if test_match:
        if current_status.startswith("Loading") and (pcc is not None or speed is not None):
            current_status = "Running"
        return current_status, test_match.group(1), speed, pcc

    return current_status, None, speed, pcc


def get_llama_dir(model):
    llama_dir = {
        "1b": os.environ.get("LLAMA_32_1B_DIR", "/proj_sw/user_dev/llama32-data/Llama3.2-1B-Instruct"),
        "3b": os.environ.get("LLAMA_32_3B_DIR", "/proj_sw/user_dev/llama32-data/Llama3.2-3B-Instruct"),
        "8b": os.environ.get("LLAMA_31_8B_DIR", "/proj_sw/user_dev/llama31-8b-data/Meta-Llama-3.1-8B-Instruct"),
        "11b": os.environ.get("LLAMA_32_11B_DIR", "/proj_sw/user_dev/llama32-data/Llama3.2-11B-Vision-Instruct"),
        "70b": os.environ.get("LLAMA_31_70B_DIR", "/proj_sw/llama3_1-weights/Meta-Llama-3.1-70B-Instruct/repacked"),
    }.get(model.lower(), "")

    if not llama_dir or not os.path.exists(llama_dir):
        print(f"Error: The directory for the {model} model does not exist: {llama_dir}")
        print("You can set the following environment variables to specify the correct directory path:")
        print("  - LLAMA_32_1B_DIR for 1b model")
        print("  - LLAMA_32_3B_DIR for 3b model")
        print("  - LLAMA_31_8B_DIR for 8b model")
        print("  - LLAMA_32_11B_DIR for 11b model")
        print("  - LLAMA_31_70B_DIR for 70b model")
        sys.exit(1)

    return llama_dir


def get_command_name(command_input):
    # Get command name
    if "pytest" in command_input:
        match = re.search(r"pytest\s+([\S]+)", command_input)
        if match:
            test_file = match.group(1)
            basename = os.path.basename(test_file).split(".")[0]
            command_name = basename
        else:
            command_name = "pytest"
    else:
        cmd = shlex.split(command_input)[0]
        command_name = os.path.basename(cmd)
    return command_name


def get_log_filename(device, model, command_input):
    command_name = get_command_name(command_input)
    filename = f"{device}-{model}-{command_name}.log"
    filename = filename.replace("/", "_")
    return filename


def find_exception_in_log(log_filename):
    exception_name = None
    with open(log_filename, "r") as f:
        log_lines = f.readlines()
        for line in reversed(log_lines):
            # Check for Python exceptions
            match = re.search(r"(\w+Error):", line)
            if match:
                exception_name = match.group(1)
                break

            # Check for TT_FATAL errors
            tt_fatal_match = re.search(r"TT_FATAL\s*(.+)", line)
            if tt_fatal_match:
                exception_name = tt_fatal_match.group(1).strip()
                break

            # Check for other FATAL errors
            fatal_match = re.search(r"FATAL", line)
            if fatal_match:
                parts = line.split("|", 1)
                if len(parts) > 1:
                    exception_name = parts[1].strip()
                break

            # Check for lines starting with "E   "
            e_match = re.match(r"E\s+(.+)", line)
            if e_match:
                exception_name = e_match.group(1).strip()
                break
    return exception_name


def terminate_process_tree(pid):
    try:
        parent = psutil.Process(pid)
        children = parent.children(recursive=True)
        for child in children:
            os.killpg(os.getpgid(child.pid), signal.SIGTERM)
        os.killpg(os.getpgid(pid), signal.SIGTERM)
    except (psutil.NoSuchProcess, ProcessLookupError):
        pass  # Process already terminated


def reset_device_async(entry, screen_lock, screen_needs_update):
    def reset_thread():
        hostname = os.environ.get("HOSTNAME", "unknown")
        config_file = os.path.expanduser(f"~/.config/tenstorrent/reset_config_{hostname}.json")
        reset_cmd = ["tt-smi", "-r", config_file]
        try:
            result = subprocess.run(reset_cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        except subprocess.CalledProcessError as e:
            pass
        finally:
            with entry["lock"]:
                entry["status"] = previous_status
            screen_needs_update.set()

    previous_status = entry["status"]
    entry["status"] = "Resetting"
    reset_thread = threading.Thread(target=reset_thread)
    reset_thread.daemon = True
    reset_thread.start()


def draw_help_bar(stdscr, current_line, num_input_fields, num_output_entries):
    max_y, max_x = stdscr.getmaxyx()
    help_text = get_help_text(current_line, num_input_fields, num_output_entries)
    stdscr.addstr(max_y - 1, 0, help_text[: max_x - 1], COLOR_PAIR_HELP_BAR)
    stdscr.clrtoeol()


def get_help_text(current_line, num_input_fields, num_output_entries):
    if current_line == 0:
        return "Shortcuts: demo, attention, mlp, decoder, decoder-prefill, model, model-prefill, model-quick | Enter: Submit | ââ: Navigate fields | Esc: Exit"
    elif current_line <= num_input_fields - 1:
        return "Enter: Next field | ââ: Navigate fields | Esc: Exit"
    else:
        return (
            "Enter: View log | Backspace/x: Cancel/remove entry | r: Restart entry | ââ: Navigate entries | Esc: Exit"
        )


if __name__ == "__main__":
    os.environ["TERM"] = "xterm-256color"

    ensure_less_installed()
    ensure_ttsmi_installed()
    curses.wrapper(main)
